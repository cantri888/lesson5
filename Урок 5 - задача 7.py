# Задача № 7: Создать вручную и заполнить несколькими строками текстовый файл,
#             в котором каждая строка будет содержать данные о фирме: название, форма собственности, выручка, издержки.
#
#             Пример строки файла: firm_1 ООО 10000 5000.
#
#             Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль.
#             Если фирма получила убытки, в расчёт средней прибыли её не включать.
#             Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями,
#             а также словарь со средней прибылью. Если фирма получила убытки,
#             также добавить её в словарь (со значением убытков).
#
#             Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
#
#             Итоговый список сохранить в виде json-объекта в соответствующий файл.
#             Пример json-объекта:
#             [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
#
#             Подсказка: использовать менеджер контекста.
# Решение:
import json

all_firm = []  # список всех данных
income = {}  # словарь, где ключ - название фирмы, а его значение - прибыль
all_income = 0  # общая сумма прибыли для каждой прибольной фирмы
count_firm = 0  # количество прибыльных фирм
average_income = 0  # средняя прибыль всех прибыльных фирм
average_dict = {}  # словарь, где ключ - средняя прибыль, а его значение - числовое значение прибыли

# используя менеджер контекста открывает файл для чтения
with open('tasks_7.txt', 'r', encoding='utf-8') as file:
    for line in file:
        # удаляем из каждой строки перевод каретки
        line = line.replace('\n', '')

        # разделяем на 4 переменных: название фирмы, тип собственности, выручка, издержки
        firma, proper, gain, costs = line.split()
        # вычисляем прибыль каждой компании
        income[firma] = int(gain) - int(costs)

        # get - возвращает значение текущего ключа
        # если прибыль больше 0, то
        if (income.get(firma) >= 0):
            # суммируем к общей прибыли прибыль текущей фирмы
            all_income += income.get(firma)
            # счетчик прибыльных фирм +1
            count_firm += 1

    # если прибыльные фирмы есть, то
    if (count_firm > 0):
        # считаем среднию прибыль прибыльных фирм
        average_income = all_income / count_firm
        # функция round - округляет до целого
        average_income = round(average_income)
        print(f'Средняя прибыль составляет: {average_income}')
    else:
        print(f'Все предоставленные фирмы работают в убыток!')

    # словарь, где ключ - средняя прибыль, а его значение - числовое значение прибыли
    average_dict = {'Средняя прибыль': average_income}

    # update - добавляет новую пару в конец словаря
    # обновляем словарь с фирмами и их прибылью/убытками добавляя словарь average_dict
    income.update(average_dict)

    # заключаем в список итоговый словарь
    all_firm.append(income)

    print(f'Прибыль/убытки предоставленных фирм: {all_firm}')

print()

# используя менеджер контекста открывает/создаем файл для записи
# файл создаем с расширением JSON - это текстовый формат для хранения и обмена данными
with open('tasks_7.json', 'w', encoding='utf-8') as file:
    # т.к. итоговый список не является 'нормальным' для понимания json формата, его надо преоброзовать
    # dump - преобразует объекты Python в соответствующие объекты json.
    json.dump(all_firm, file)

    # dump - преобразует объекты Python в строку json.
    # ensure_ascii=False - необходимый параметр для нормального отображение русских букв в json файлах
    format_json = json.dumps(all_firm, ensure_ascii=False)

print('Файл с расширением JSON создан:')
print(format_json)
